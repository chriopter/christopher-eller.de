# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo Site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore:
      - 'import/**'  # Ignore changes to import directory

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggered by process-photos workflow
  repository_dispatch:
    types: [trigger-hugo-build]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1  # Shallow clone for speed
          
      - name: Read Hugo version
        id: hugo-version
        run: echo "HUGO_VERSION=$(cat .hugoversion)" >> $GITHUB_OUTPUT
        
      # Comprehensive caching strategy
      - name: Cache Hugo resources
        uses: actions/cache@v4
        with:
          path: |
            ~/.hugo_cache/
            ~/.cache/hugo_cache/
            ${{ runner.temp }}/hugo_cache
            /tmp/hugo_cache
            resources/_gen
          key: ${{ runner.os }}-hugo-${{ steps.hugo-version.outputs.HUGO_VERSION }}-${{ hashFiles('hugo.toml', 'content/**', 'layouts/**', 'static/**') }}
          restore-keys: |
            ${{ runner.os }}-hugo-${{ steps.hugo-version.outputs.HUGO_VERSION }}-
            ${{ runner.os }}-hugo-
            
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
        
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ steps.hugo-version.outputs.HUGO_VERSION }}
          extended: true
          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
        
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --minify \
            --gc \
            --enableGitInfo \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
